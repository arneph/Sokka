fn ReadSrc(src_dir: string) -> string {
    var src: string = ""
    var src_files: string = direntries(src_dir)
    var src_file: string
    src_file, src_files = Split(src_files)
    for len(src_files) > 0 || len(src_file) > 0 {
        if EndsWith(src_file, ".sk") {
            src = src ++ read(src_dir ++ "/" ++ src_file) ++ "\n"
        }
        src_file, src_files = Split(src_files)
    }
    return src
}

fn TranslateProgram(src: string) -> string {
    var out: string = read("clib/lib.c")
    var constants: string = ""
    var decls: string = ""
    var defs: string = ""
    var tok: int
    var tok_str: string
    tok, tok_str = Peek(src)
    for tok != TOK_EOF {
        if tok == TOK_NEWLINE {
            src, _ = ConsumeToken(src, TOK_NEWLINE)
            tok, tok_str = Peek(src)
            continue
        } else if tok == TOK_LET {
            var const_decl: string
            src, const_decl = TranslateConstDecl(src, "")
            constants = constants ++ const_decl
        } else if tok == TOK_FN {
            var fn_decl: string
            var fn_def: string
            src, fn_decl, fn_def = TranslateFunc(src)
            decls = decls ++ fn_decl
            defs = defs ++ fn_def
        } else {
            print("unexpected decl token, got: " ++ itoa(tok) ++ " \"" ++ tok_str ++ "\"")
            exit(1)
        }
        tok, tok_str = Peek(src)
    }
    src, _ = ConsumeToken(src, TOK_EOF)
    if constants <!> "" {
        out = out ++ constants ++ "\n"
    }
    if decls <!> "" {
        out = out ++ decls ++ "\n"
    }
    if defs <!> "" {
        out = out ++ defs ++ "\n"
    }
    return out
}

fn main(args: string) {
    var i: int = Find(args, " ")
    var src_dir: string = args[:i]
    var src: string = ReadSrc(src_dir)
    var out: string = TranslateProgram(src)
    var out_file: string = args[i+1:]
    write(out_file, out)
}
