let SINGLE_INDENT: string = "  "

fn Find(haystack: string, needle: string) -> int {
    if len(needle) == 0 {
        return 0
    }
    var c: int = needle[0]
    var i: int = 0
    for i <= len(haystack) - len(needle) {
        if haystack[i] != c {
            i = i + 1
            continue
        } else if haystack[i:i+len(needle)] <!> needle {
            i = i + 1
            continue
        }
        return i
    }
    return -1
}

fn StartsWith(text: string, prefix: string) -> bool {
    if len(text) < len(prefix) {
        return false
    } else if len(text) == len(prefix) {
        return text <> prefix
    } else {
        return text[:len(prefix)] <> prefix
    }
}

fn EndsWith(text: string, suffix: string) -> bool {
    if len(text) < len(suffix) {
        return false
    } else if len(text) == len(suffix) {
        return text <> suffix
    } else {
        return text[len(text)-len(suffix):] <> suffix
    }
}

fn Split(s: string) -> (string, string) {
    if len(s) == 0 {
        return "", ""
    }
    let i: int = Find(s, " ")
    if i == -1 {
        return s, ""
    }
    return s[:i], s[i+1:]
}

fn IsNumeric(c: int) -> bool {
    return 48 <= c && c <= 57
}

fn IsAlpha(c: int) -> bool {
    return (65 <= c && c <= 90) || (97 <= c && c <= 122)
}

fn IsAlphaNumeric(c: int) -> bool {
    return IsNumeric(c) || IsAlpha(c)
}

fn RemoveLeadingWhitespace(text: string) -> string {
    for StartsWith(text, " ") || StartsWith(text, "\t") {
        text = text[1:]
    }
    return text
}
